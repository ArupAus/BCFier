<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:themes="clr-namespace:Bcfier.Themes">

  <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
  <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
  <Color x:Key="DisabledForegroundColor">#FF888888</Color>
  <!--TEXTPLACEHOLDER-->

  <SolidColorBrush x:Key="TextPlaceholder_Background" Color="White" />
  <SolidColorBrush x:Key="TextPlaceholder_Foreground" Color="Black" />
  <LinearGradientBrush x:Key="TextPlaceholder_Border" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#FFABADB3" Offset="0.05" />
    <GradientStop Color="#FFE2E3EA" Offset="0.07" />
    <GradientStop Color="#FFE3E9EF" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="TextPlaceholder_BorderMouseOver" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#FF5C97C1" Offset="0.05" />
    <GradientStop Color="#FFB9D7EB" Offset="0.07" />
    <GradientStop Color="#FFC7E2F1" Offset="1" />
  </LinearGradientBrush>

  <SolidColorBrush x:Key="TextPlaceholder_PlaceholderColor" Color="Gray" />

  <Style x:Key="{x:Type themes:TextPlaceholder}"  TargetType="{x:Type themes:TextPlaceholder}" >
    <Setter Property="Background" Value="{StaticResource TextPlaceholder_Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource TextPlaceholder_Border}" />
    <Setter Property="Foreground" Value="{StaticResource TextPlaceholder_Foreground}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Placeholder" Value="Search" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="PlaceholderColor" Value="{StaticResource TextPlaceholder_PlaceholderColor}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type themes:TextPlaceholder}">
          <Border x:Name="Border" 
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="LayoutGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <!--<ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent},
                                                  Path=ActualHeight}" />-->
              </Grid.ColumnDefinitions>
              <ScrollViewer Margin="2" x:Name="PART_ContentHost" Grid.Column="0" />
              <TextBlock x:Name="Placeholder" 
                     Margin="2"
                     Grid.Column="0"
                     TextWrapping="{TemplateBinding TextWrapping}"              
                     Foreground="{Binding RelativeSource={RelativeSource TemplatedParent},
                                          Path=PlaceholderColor}"
                     Text="{Binding RelativeSource={RelativeSource TemplatedParent},
                                       Path=Placeholder}"
                     Padding="2,0,0,0"
                     FontStyle="Italic" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="BorderBrush" Value="{StaticResource TextPlaceholder_BorderMouseOver}" />
              <Setter Property="Cursor" Value="IBeam"></Setter>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter Property="BorderBrush" Value="{StaticResource TextPlaceholder_BorderMouseOver}" />
            </Trigger>
            <Trigger Property="HasText" Value="True">
              <Setter Property="Visibility" TargetName="Placeholder" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!-- END TEXTPLACEHOLDER-->


  <!-- LABEL SELECTABLE-->
  <Style x:Key="{x:Type themes:LabelSelectable}"  TargetType="{x:Type TextBox}" >
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="BorderThickness" Value="4"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="IsReadOnly" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
          <Border Name="Border"
                CornerRadius="2"
                Padding="2"
                BorderThickness="1">

            <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!-- END LABEL SELECTABLE-->

  <!--BUTTON ICON-->
  <Style x:Key="{x:Type themes:ButtonIcon}"  TargetType="{x:Type themes:ButtonIcon}"  BasedOn="{StaticResource {x:Type Button}}" >
    <Style.Triggers>
      <Trigger  Property="IsVertical" Value="True" >
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type themes:ButtonIcon}">
              <Border Name="ButtonBorder"  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Grid>
                  <StackPanel Orientation="Vertical" Margin="5" >
                    <Path Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}},Path=IconColor,TargetNullValue='#000'}"  
                          Name="Icon"  Stretch="Uniform"  UseLayoutRounding="False" 
                          Margin="{Binding Path=IconMarginVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                          Height="{Binding Path=IconSizeVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}" 
                          Width="{Binding Path=IconSizeVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}" 
                         Data="{Binding Path=IconPath, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"/>
                    <TextBlock  x:Name="MyContentPresenter" Text="{TemplateBinding Content}" MaxWidth="80" HorizontalAlignment="Center" 
                                VerticalAlignment="Center"  Margin="0" TextWrapping="Wrap" TextAlignment="Center" >
                    </TextBlock>
                  </StackPanel>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter TargetName="ButtonBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}},Path=HighlightColor,TargetNullValue='#AADAF6'}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                  <Setter TargetName="ButtonBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}},Path=HighlightColor,TargetNullValue='#94cdec'}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="MyContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}},Path=DisabledIconColor,TargetNullValue='#808080'}" />
                  <Setter TargetName="Icon" Property="Fill" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}},Path=DisabledIconColor,TargetNullValue='#808080'}" />
                </Trigger>
                <Trigger Property="HasContent">
                  <Trigger.Value>
                    <system:Boolean>False</system:Boolean>
                  </Trigger.Value>
                  <Setter Property="Visibility" Value="Collapsed" TargetName="MyContentPresenter" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    
      <Trigger  Property="IsVertical" Value="False" >
        <Setter Property="ContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <StackPanel Orientation="Horizontal" x:Name="ButtonContent">
                <Path Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}},Path=IconColor,TargetNullValue='#000'}" 
                              x:Name="Icon"  
                          Margin="{Binding Path=IconMargin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                          Height="{Binding Path=IconSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}" 
                          Width="{Binding Path=IconSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}" 
                              Stretch="Uniform"  UseLayoutRounding="False" 
                                      Data="{Binding Path=IconPath, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}" />
                <ContentPresenter 
                                        Margin="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        RecognizesAccessKey="True"
                            Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                  Name="MyContentPresenter"/>
              </StackPanel>
              <DataTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="Icon" Property="Fill" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}},Path=DisabledIconColor,TargetNullValue='#808080'}" />
                </Trigger>
              </DataTemplate.Triggers>
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>

  </Style>
  <!--BUTTON ICON-->


</ResourceDictionary>